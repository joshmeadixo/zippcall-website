"use client";

import { useState, useEffect, useMemo, useRef } from 'react';

// --- Helper Data --- 
// Static data (still used for fallback names/rates)
const staticPricingData = {
  popular: [
    { country: "United States", code: "US", flag: "ðŸ‡ºðŸ‡¸", rate: "0.01" },
    { country: "United Kingdom", code: "GB", flag: "ðŸ‡¬ðŸ‡§", rate: "0.02" },
    { country: "Canada", code: "CA", flag: "ðŸ‡¨ðŸ‡¦", rate: "0.01" },
    { country: "Australia", code: "AU", flag: "ðŸ‡¦ðŸ‡º", rate: "0.03" },
    { country: "Germany", code: "DE", flag: "ðŸ‡©ðŸ‡ª", rate: "0.02" },
    { country: "France", code: "FR", flag: "ðŸ‡«ðŸ‡·", rate: "0.02" },
  ],
  asia: [
    { country: "China", code: "CN", flag: "ðŸ‡¨ðŸ‡³", rate: "0.02" },
    { country: "India", code: "IN", flag: "ðŸ‡®ðŸ‡³", rate: "0.03" },
    { country: "Japan", code: "JP", flag: "ðŸ‡¯ðŸ‡µ", rate: "0.04" },
    { country: "South Korea", code: "KR", flag: "ðŸ‡°ðŸ‡·", rate: "0.03" },
    { country: "Singapore", code: "SG", flag: "ðŸ‡¸ðŸ‡¬", rate: "0.02" },
    { country: "Thailand", code: "TH", flag: "ðŸ‡¹ðŸ‡­", rate: "0.04" },
  ],
  africa: [
    { country: "South Africa", code: "ZA", flag: "ðŸ‡¿ðŸ‡¦", rate: "0.07" },
    { country: "Nigeria", code: "NG", flag: "ðŸ‡³ðŸ‡¬", rate: "0.09" },
    { country: "Egypt", code: "EG", flag: "ðŸ‡ªðŸ‡¬", rate: "0.08" },
    { country: "Kenya", code: "KE", flag: "ðŸ‡°ðŸ‡ª", rate: "0.10" },
    { country: "Morocco", code: "MA", flag: "ðŸ‡²ðŸ‡¦", rate: "0.06" },
    { country: "Ghana", code: "GH", flag: "ðŸ‡¬ðŸ‡­", rate: "0.10" },
  ]
};

// Countries that Twilio doesn't support calling to
const unsupportedCountries = ["China", "Iran"];

// Comprehensive Country Code -> Flag Emoji Mapping
const countryCodeToFlagMap: { [key: string]: string } = {
  AF: "ðŸ‡¦ðŸ‡«", AD: "ðŸ‡¦ðŸ‡©", AE: "ðŸ‡¦ðŸ‡ª", AG: "ðŸ‡¦ðŸ‡¬", AI: "ðŸ‡¦ðŸ‡®", AL: "ðŸ‡¦ðŸ‡±", AM: "ðŸ‡¦ðŸ‡²", AO: "ðŸ‡¦ðŸ‡´", AQ: "ðŸ‡¦ðŸ‡¶", AR: "ðŸ‡¦ðŸ‡·", AS: "ðŸ‡¦ðŸ‡¸", AT: "ðŸ‡¦ðŸ‡¹", AU: "ðŸ‡¦ðŸ‡º", AW: "ðŸ‡¦ðŸ‡¼", AX: "ðŸ‡¦ðŸ‡½", AZ: "ðŸ‡¦ðŸ‡¿",
  BA: "ðŸ‡§ðŸ‡¦", BB: "ðŸ‡§ðŸ‡§", BD: "ðŸ‡§ðŸ‡©", BE: "ðŸ‡§ðŸ‡ª", BF: "ðŸ‡§ðŸ‡«", BG: "ðŸ‡§ðŸ‡¬", BH: "ðŸ‡§ðŸ‡­", BI: "ðŸ‡§ðŸ‡®", BJ: "ðŸ‡§ðŸ‡¯", BL: "ðŸ‡§ðŸ‡±", BM: "ðŸ‡§ðŸ‡²", BN: "ðŸ‡§ðŸ‡³", BO: "ðŸ‡§ðŸ‡´", BQ: "ðŸ‡§ðŸ‡¶", BR: "ðŸ‡§ðŸ‡·", BS: "ðŸ‡§ðŸ‡¸", BT: "ðŸ‡§ðŸ‡¹", BV: "ðŸ‡§ðŸ‡»", BW: "ðŸ‡§ðŸ‡¼", BY: "ðŸ‡§ðŸ‡¾", BZ: "ðŸ‡§ðŸ‡¿",
  CA: "ðŸ‡¨ðŸ‡¦", CC: "ðŸ‡¨ðŸ‡¨", CD: "ðŸ‡¨ðŸ‡©", CF: "ðŸ‡¨ðŸ‡«", CG: "ðŸ‡¨ðŸ‡¬", CH: "ðŸ‡¨ðŸ‡­", CI: "ðŸ‡¨ðŸ‡®", CK: "ðŸ‡¨ðŸ‡°", CL: "ðŸ‡¨ðŸ‡±", CM: "ðŸ‡¨ðŸ‡²", CN: "ðŸ‡¨ðŸ‡³", CO: "ðŸ‡¨ðŸ‡´", CR: "ðŸ‡¨ðŸ‡·", CU: "ðŸ‡¨ðŸ‡º", CV: "ðŸ‡¨ðŸ‡»", CW: "ðŸ‡¨ðŸ‡¼", CX: "ðŸ‡¨ðŸ‡½", CY: "ðŸ‡¨ðŸ‡¾", CZ: "ðŸ‡¨ðŸ‡¿",
  DE: "ðŸ‡©ðŸ‡ª", DJ: "ðŸ‡©ðŸ‡¯", DK: "ðŸ‡©ðŸ‡°", DM: "ðŸ‡©ðŸ‡²", DO: "ðŸ‡©ðŸ‡´", DZ: "ðŸ‡©ðŸ‡¿",
  EC: "ðŸ‡ªðŸ‡¨", EE: "ðŸ‡ªðŸ‡ª", EG: "ðŸ‡ªðŸ‡¬", EH: "ðŸ‡ªðŸ‡­", ER: "ðŸ‡ªðŸ‡·", ES: "ðŸ‡ªðŸ‡¸", ET: "ðŸ‡ªðŸ‡¹", FI: "ðŸ‡«ðŸ‡®", FJ: "ðŸ‡«ðŸ‡¯", FK: "ðŸ‡«ðŸ‡°", FM: "ðŸ‡«ðŸ‡²", FO: "ðŸ‡«ðŸ‡´", FR: "ðŸ‡«ðŸ‡·",
  GA: "ðŸ‡¬ðŸ‡¦", GB: "ðŸ‡¬ðŸ‡§", GD: "ðŸ‡¬ðŸ‡©", GE: "ðŸ‡¬ðŸ‡ª", GF: "ðŸ‡¬ðŸ‡«", GG: "ðŸ‡¬ðŸ‡¬", GH: "ðŸ‡¬ðŸ‡­", GI: "ðŸ‡¬ðŸ‡®", GL: "ðŸ‡¬ðŸ‡±", GM: "ðŸ‡¬ðŸ‡²", GN: "ðŸ‡¬ðŸ‡³", GP: "ðŸ‡¬ðŸ‡µ", GQ: "ðŸ‡¬ðŸ‡¶", GR: "ðŸ‡¬ðŸ‡·", GS: "ðŸ‡¬ðŸ‡¸", GT: "ðŸ‡¬ðŸ‡¹", GU: "ðŸ‡¬ðŸ‡º", GW: "ðŸ‡¬ðŸ‡¼", GY: "ðŸ‡¬ðŸ‡¾",
  HK: "ðŸ‡­ðŸ‡°", HM: "ðŸ‡­ðŸ‡²", HN: "ðŸ‡­ðŸ‡³", HR: "ðŸ‡­ðŸ‡·", HT: "ðŸ‡­ðŸ‡¹", HU: "ðŸ‡­ðŸ‡º",
  ID: "ðŸ‡®ðŸ‡©", IE: "ðŸ‡®ðŸ‡ª", IL: "ðŸ‡®ðŸ‡±", IM: "ðŸ‡®ðŸ‡²", IN: "ðŸ‡®ðŸ‡³", IO: "ðŸ‡®ðŸ‡´", IQ: "ðŸ‡®ðŸ‡¶", IR: "ðŸ‡®ðŸ‡·", IS: "ðŸ‡®ðŸ‡¸", IT: "ðŸ‡®ðŸ‡¹",
  JE: "ðŸ‡¯ðŸ‡ª", JM: "ðŸ‡¯ðŸ‡²", JO: "ðŸ‡¯ðŸ‡´", JP: "ðŸ‡¯ðŸ‡µ",
  KE: "ðŸ‡°ðŸ‡ª", KG: "ðŸ‡°ðŸ‡¬", KH: "ðŸ‡°ðŸ‡­", KI: "ðŸ‡°ðŸ‡®", KM: "ðŸ‡°ðŸ‡²", KN: "ðŸ‡°ðŸ‡³", KP: "ðŸ‡°ðŸ‡µ", KR: "ðŸ‡°ðŸ‡·", KW: "ðŸ‡°ðŸ‡¼", KY: "ðŸ‡°ðŸ‡¾", KZ: "ðŸ‡°ðŸ‡¿",
  LA: "ðŸ‡±ðŸ‡¦", LB: "ðŸ‡±ðŸ‡§", LC: "ðŸ‡±ðŸ‡¨", LI: "ðŸ‡±ðŸ‡®", LK: "ðŸ‡±ðŸ‡°", LR: "ðŸ‡±ðŸ‡·", LS: "ðŸ‡±ðŸ‡¸", LT: "ðŸ‡±ðŸ‡¹", LU: "ðŸ‡±ðŸ‡º", LV: "ðŸ‡±ðŸ‡»", LY: "ðŸ‡±ðŸ‡¾",
  MA: "ðŸ‡²ðŸ‡¦", MC: "ðŸ‡²ðŸ‡¨", MD: "ðŸ‡²ðŸ‡©", ME: "ðŸ‡²ðŸ‡ª", MF: "ðŸ‡²ðŸ‡«", MG: "ðŸ‡²ðŸ‡¬", MH: "ðŸ‡²ðŸ‡­", MK: "ðŸ‡²ðŸ‡°", ML: "ðŸ‡²ðŸ‡±", MM: "ðŸ‡²ðŸ‡²", MN: "ðŸ‡²ðŸ‡³", MO: "ðŸ‡²ðŸ‡´", MP: "ðŸ‡²ðŸ‡µ", MQ: "ðŸ‡²ðŸ‡¶", MR: "ðŸ‡²ðŸ‡·", MS: "ðŸ‡²ðŸ‡¸", MT: "ðŸ‡²ðŸ‡¹", MU: "ðŸ‡²ðŸ‡º", MV: "ðŸ‡²ðŸ‡»", MW: "ðŸ‡²ðŸ‡¼", MX: "ðŸ‡²ðŸ‡½", MY: "ðŸ‡²ðŸ‡¾", MZ: "ðŸ‡²ðŸ‡¿",
  NA: "ðŸ‡³ðŸ‡¦", NC: "ðŸ‡³ðŸ‡¨", NE: "ðŸ‡³ðŸ‡ª", NF: "ðŸ‡³ðŸ‡«", NG: "ðŸ‡³ðŸ‡¬", NI: "ðŸ‡³ðŸ‡®", NL: "ðŸ‡³ðŸ‡±", NO: "ðŸ‡³ðŸ‡´", NP: "ðŸ‡³ðŸ‡µ", NR: "ðŸ‡³ðŸ‡·", NU: "ðŸ‡³ðŸ‡º", NZ: "ðŸ‡³ðŸ‡¿",
  OM: "ðŸ‡´ðŸ‡²",
  PA: "ðŸ‡µðŸ‡¦", PE: "ðŸ‡µðŸ‡ª", PF: "ðŸ‡µðŸ‡«", PG: "ðŸ‡µðŸ‡¬", PH: "ðŸ‡µðŸ‡­", PK: "ðŸ‡µðŸ‡°", PL: "ðŸ‡µðŸ‡±", PM: "ðŸ‡µðŸ‡²", PN: "ðŸ‡µðŸ‡³", PR: "ðŸ‡µðŸ‡·", PS: "ðŸ‡µðŸ‡¸", PT: "ðŸ‡µðŸ‡¹", PW: "ðŸ‡µðŸ‡¼", PY: "ðŸ‡µðŸ‡¾",
  QA: "ðŸ‡¶ðŸ‡¦",
  RE: "ðŸ‡·ðŸ‡ª", RO: "ðŸ‡·ðŸ‡´", RS: "ðŸ‡·ðŸ‡¸", RU: "ðŸ‡·ðŸ‡º", RW: "ðŸ‡·ðŸ‡¼",
  SA: "ðŸ‡¸ðŸ‡¦", SB: "ðŸ‡¸ðŸ‡§", SC: "ðŸ‡¸ðŸ‡¨", SD: "ðŸ‡¸ðŸ‡©", SE: "ðŸ‡¸ðŸ‡ª", SG: "ðŸ‡¸ðŸ‡¬", SH: "ðŸ‡¸ðŸ‡­", SI: "ðŸ‡¸ðŸ‡®", SJ: "ðŸ‡¸ðŸ‡¯", SK: "ðŸ‡¸ðŸ‡°", SL: "ðŸ‡¸ðŸ‡±", SM: "ðŸ‡¸ðŸ‡²", SN: "ðŸ‡¸ðŸ‡³", SO: "ðŸ‡¸ðŸ‡´", SR: "ðŸ‡¸ðŸ‡·", SS: "ðŸ‡¸ðŸ‡¸", ST: "ðŸ‡¸ðŸ‡¹", SV: "ðŸ‡¸ðŸ‡»", SX: "ðŸ‡¸ðŸ‡½", SY: "ðŸ‡¸ðŸ‡¾", SZ: "ðŸ‡¸ðŸ‡¿",
  TC: "ðŸ‡¹ðŸ‡¨", TD: "ðŸ‡¹ðŸ‡©", TF: "ðŸ‡¹ðŸ‡«", TG: "ðŸ‡¹ðŸ‡¬", TH: "ðŸ‡¹ðŸ‡­", TJ: "ðŸ‡¹ðŸ‡¯", TK: "ðŸ‡¹ðŸ‡°", TL: "ðŸ‡¹ðŸ‡±", TM: "ðŸ‡¹ðŸ‡²", TN: "ðŸ‡¹ðŸ‡³", TO: "ðŸ‡¹ðŸ‡´", TR: "ðŸ‡¹ðŸ‡·", TT: "ðŸ‡¹ðŸ‡¹", TV: "ðŸ‡¹ðŸ‡»", TW: "ðŸ‡¹ðŸ‡¼", TZ: "ðŸ‡¹ðŸ‡¿",
  UA: "ðŸ‡ºðŸ‡¦", UG: "ðŸ‡ºðŸ‡¬", UM: "ðŸ‡ºðŸ‡²", US: "ðŸ‡ºðŸ‡¸", UY: "ðŸ‡ºðŸ‡¾", UZ: "ðŸ‡ºðŸ‡¿",
  VA: "ðŸ‡»ðŸ‡¦", VC: "ðŸ‡»ðŸ‡¨", VE: "ðŸ‡»ðŸ‡ª", VG: "ðŸ‡»ðŸ‡¬", VI: "ðŸ‡»ðŸ‡®", VN: "ðŸ‡»ðŸ‡³", VU: "ðŸ‡»ðŸ‡º",
  WF: "ðŸ‡¼ðŸ‡«", WS: "ðŸ‡¼ðŸ‡¸",
  YE: "ðŸ‡¾ðŸ‡ª", YT: "ðŸ‡¾ðŸ‡¹",
  ZA: "ðŸ‡¿ðŸ‡¦", ZM: "ðŸ‡¿ðŸ‡²", ZW: "ðŸ‡¿ðŸ‡¼"
};

// Static data combined for fallback name/rate lookup
const allStaticCountries = [
  ...staticPricingData.popular,
  ...staticPricingData.asia,
  ...staticPricingData.africa
];

// Map code to static info (mainly for fallback name)
const codeToStaticNameMap: { [key: string]: string } = 
  allStaticCountries.reduce((acc, curr) => {
    acc[curr.code] = curr.country;
    return acc;
  }, {} as { [key: string]: string });

// --- Component --- 
interface CountryOption {
  code: string;
  name: string;
  flag?: string;
}

interface PricingDataEntry {
    finalPrice: number;
    countryName?: string; // Optional name from API
    currency?: string;
}

export default function Pricing() {
  const [selectedCountryName, setSelectedCountryName] = useState("United Kingdom");
  const [minutes, setMinutes] = useState(10);
  const [currentRate, setCurrentRate] = useState<number | null>(null);
  const [calculatedCost, setCalculatedCost] = useState<string | null>(null);
  const [isUnsupportedCountry, setIsUnsupportedCountry] = useState(false);
  
  const [allPricingData, setAllPricingData] = useState<Record<string, PricingDataEntry> | null>(null);
  const [isInitialLoading, setIsInitialLoading] = useState(true);
  const [initialError, setInitialError] = useState<string | null>(null);

  const [searchTerm, setSearchTerm] = useState("");
  const [countryListForDropdown, setCountryListForDropdown] = useState<CountryOption[]>([]);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Fetch all pricing data on mount
  useEffect(() => {
    const fetchAllPricing = async () => {
      setIsInitialLoading(true);
      setInitialError(null);
      try {
        const response = await fetch(`https://app.zippcall.com/api/pricing/all`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data: Record<string, PricingDataEntry> = await response.json();
        if (typeof data === 'object' && data !== null) {
            setAllPricingData(data);
            const countries: CountryOption[] = Object.keys(data)
              .map(code => ({
                code: code,
                name: data[code].countryName || codeToStaticNameMap[code] || code, 
                flag: countryCodeToFlagMap[code]
              }))
              .sort((a, b) => a.name.localeCompare(b.name));
            setCountryListForDropdown(countries);
            if (!countries.some(c => c.name === selectedCountryName)) {
              setSelectedCountryName(countries[0]?.name || "");
            }
        } else {
            throw new Error("Invalid data format received from API.");
        }
      } catch (e: any) {
        console.error("Failed to fetch all pricing:", e);
        setInitialError("Could not load live pricing data. Using estimates.");
        const staticCountries = allStaticCountries
            .map(c => ({ 
                code: c.code, 
                name: c.country, 
                flag: countryCodeToFlagMap[c.code]
            }))
            .sort((a, b) => a.name.localeCompare(b.name));
        setCountryListForDropdown(staticCountries);
        if (!staticCountries.some(c => c.name === selectedCountryName)) {
            setSelectedCountryName(staticCountries[0]?.name || "");
        }
      }
      setIsInitialLoading(false);
    };
    fetchAllPricing();
  }, []);

  // Update rate when country changes or allPricingData loads
  useEffect(() => {
    // Check if the selected country is in the unsupported list
    if (unsupportedCountries.includes(selectedCountryName)) {
      setIsUnsupportedCountry(true);
      setCurrentRate(null);
      return;
    }
    
    setIsUnsupportedCountry(false);
    let wholesaleRate: number | null = null;
    const selectedCountryCode = countryListForDropdown.find(c => c.name === selectedCountryName)?.code;
    if (allPricingData && selectedCountryCode) {
        const liveEntry = allPricingData[selectedCountryCode];
        if (liveEntry?.finalPrice !== undefined && typeof liveEntry.finalPrice === 'number') {
            wholesaleRate = liveEntry.finalPrice;
        } 
    }
    if (wholesaleRate === null && !isInitialLoading) { 
        const staticCountry = allStaticCountries.find(c => c.country === selectedCountryName);
        if (staticCountry?.rate) {
            wholesaleRate = parseFloat(staticCountry.rate);
        }
    }
    let finalRate: number | null = null;
    if (wholesaleRate !== null) {
      finalRate = wholesaleRate;
    }
    setCurrentRate(finalRate);
  }, [selectedCountryName, allPricingData, isInitialLoading, countryListForDropdown]);

  // Calculate cost when rate or minutes change
  useEffect(() => {
    if (currentRate !== null) {
      const cost = (currentRate * minutes).toFixed(2);
      setCalculatedCost(cost);
    } else {
      setCalculatedCost(null);
    }
  }, [currentRate, minutes]);

  // Filter countries for dropdown based on search term
  const filteredCountries = useMemo(() => {
    if (!searchTerm) {
      return countryListForDropdown;
    }
    return countryListForDropdown.filter(country =>
      country.name.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm, countryListForDropdown]);

  const handleCountrySelect = (countryName: string) => {
    setSelectedCountryName(countryName);
    setSearchTerm("");
    
    // Try blurring the currently focused element to close the dropdown
    if (document.activeElement instanceof HTMLElement) {
      document.activeElement.blur();
    }

    // Keep the attribute removal as a potential fallback/cleanup
    const elem = dropdownRef.current;
    if (elem) {
        elem.removeAttribute('open'); 
    }
  };

  const currentSelectedCountry = countryListForDropdown.find(c => c.name === selectedCountryName);

  return (
    <section id="pricing" className="py-16 bg-white">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-3xl md:text-4xl font-bold text-zippcall-blue mb-4">
            Transparent, Affordable Pricing
          </h2>
          <p className="text-lg text-zippcall-neutral max-w-3xl mx-auto">
            Make international calls at a fraction of the cost of traditional providers. 
            No hidden fees, no subscriptions, just pay for what you use.
          </p>
        </div>

        <div className="bg-white rounded-lg shadow-lg border border-zippcall-light-blue/20 overflow-visible max-w-4xl mx-auto p-8">
          <h3 className="text-2xl font-bold text-zippcall-blue mb-6 text-center">Estimate Your Call Cost</h3>
          <div className="flex flex-col md:flex-row gap-6 items-center justify-center">
            <div className="w-full md:w-1/2 relative">
              <label htmlFor="country-select-btn" className="block text-sm font-medium text-zippcall-neutral mb-1">Select Country:</label>
              <div className="dropdown w-full static" ref={dropdownRef}>
                <button tabIndex={0} id="country-select-btn" className="btn btn-outline border-zippcall-light-blue/30 text-zippcall-blue bg-white w-full justify-start font-normal hover:border-zippcall-blue/40">
                  {currentSelectedCountry?.flag && <span className="mr-2 text-lg">{currentSelectedCountry.flag}</span>}
                  {currentSelectedCountry?.name || "Select Country..."}
                  <span className="ml-auto">â–¼</span>
                </button>
                <ul tabIndex={0} className="dropdown-content z-[999] menu p-0 shadow bg-base-100 rounded-box w-full mt-1 max-h-[300px] overflow-y-auto flex-nowrap absolute">
                  <li className="sticky top-0 z-10 bg-base-100 px-2 pt-2 pb-1 border-b border-base-200">
                    <input
                      type="text"
                      placeholder="Search countries..."
                      className="input input-bordered input-sm w-full"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      onClick={(e) => e.stopPropagation()}
                    />
                  </li>
                  <div className="p-2">
                    {isInitialLoading && <li><span className="loading loading-dots loading-sm mx-auto"></span></li>}
                    {!isInitialLoading && filteredCountries.length === 0 && <li className="px-4 py-2"><a>No countries found</a></li>}
                    {!isInitialLoading && filteredCountries.map(country => (
                      <li key={country.code}>
                        <a onClick={() => handleCountrySelect(country.name)} className={`${selectedCountryName === country.name ? "bg-blue-100 text-blue-700" : "hover:bg-gray-100"} flex items-center`}>
                          {country.flag && <span className="mr-2 text-lg">{country.flag}</span>}
                          {country.name}
                        </a>
                      </li>
                    ))}
                  </div>
                </ul>
              </div>
            </div>

            <div className="w-full md:w-1/2">
              <label htmlFor="minutes-slider" className="block text-sm font-medium text-zippcall-neutral mb-1">Select Minutes: {minutes}</label>
              <input
                id="minutes-slider"
                type="range"
                min="1"
                max="120"
                value={minutes}
                onChange={(e) => setMinutes(Number(e.target.value))}
                className="range range-primary bg-zippcall-light-blue/20 accent-zippcall-blue w-full h-2 rounded-lg cursor-pointer"
              />
            </div>
          </div>

          <div className="mt-8 text-center p-6 bg-zippcall-cream rounded-lg border border-zippcall-blue/10 shadow-inner min-h-[100px] flex items-center justify-center">
            {isInitialLoading && (
              <div className="text-zippcall-neutral">Loading live rates... <span className="loading loading-spinner loading-sm"></span></div>
            )}
            {initialError && !isInitialLoading && (
              <div className="text-orange-600 font-medium text-sm">Error: {initialError}</div>
            )}
            {!isInitialLoading && isUnsupportedCountry && (
              <div className="text-orange-600 font-medium">
                <p>ZippCall does not currently support calls to {selectedCountryName}, we are working to add this soon.</p>
              </div>
            )}
            {!isInitialLoading && !isUnsupportedCountry && currentRate !== null && calculatedCost !== null && (
              <div>
                {initialError && <p className="text-xs text-orange-500 mb-2">Could not load live rate, showing estimate.</p>}
                <p className="text-lg text-zippcall-neutral">
                  Rate for <span className="font-bold text-zippcall-blue">{selectedCountryName}</span>: <span className="font-bold text-zippcall-blue">${currentRate.toFixed(2)}</span>/minute
                </p>
                <p className="text-3xl font-bold text-zippcall-blue mt-2">
                  Estimated cost for {minutes} minutes: <span className="text-zippcall-light-blue">${calculatedCost}</span>
                </p>
              </div>
            )}
            {!isInitialLoading && !isUnsupportedCountry && !initialError && currentRate === null && (
              <div className="text-zippcall-neutral">Rate not available for {selectedCountryName}.</div>
            )}
          </div>
        </div>
      </div>
    </section>
  );
} 